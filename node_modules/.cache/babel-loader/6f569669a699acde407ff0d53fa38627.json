{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\yuki0\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\06 - SportsStore - REST and Checkout\\\\sportsstore\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\yuki0\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\06 - SportsStore - REST and Checkout\\\\sportsstore\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { ActionTypes } from \"./Types\";\nexport var CartReducer = function CartReducer(storeData, action) {\n  var newStore = _objectSpread({\n    cart: [],\n    cartItems: 0,\n    cartPrice: 0\n  }, storeData);\n\n  switch (action.type) {\n    case ActionTypes.CART_ADD:\n      var p = action.payload.product;\n      var q = action.payload.quantity;\n      var existing = newStore.cart.find(function (item) {\n        return item.product.id === p.id;\n      });\n\n      if (existing) {\n        existing.quantity += q;\n      } else {\n        newStore.cart = [].concat(_toConsumableArray(newStore.cart), [action.payload]);\n      }\n\n      newStore.cartItems += q;\n      newStore.cartPrice += p.price * q;\n      return newStore;\n\n    case ActionTypes.CART_UPDATE:\n      newStore.cart = newStore.cart.map(function (item) {\n        if (item.product.id === action.payload.product.id) {\n          var diff = action.payload.quantity - item.quantity;\n          newStore.cartItems += diff;\n          newStore.cartPrice += item.product.price * diff;\n          return action.payload;\n        } else {\n          return item;\n        }\n      });\n      return newStore;\n\n    case ActionTypes.CART_REMOVE:\n      var selection = newStore.cart.find(function (item) {\n        return item.product.id === action.payload.id;\n      });\n      newStore.cartItems -= selection.quantity;\n      newStore.cartPrice -= selection.quantity * selection.product.price;\n      newStore.cart = newStore.cart.filter(function (item) {\n        return item !== selection;\n      });\n      return newStore;\n\n    case ActionTypes.CART_CLEAR:\n      return _objectSpread({}, storeData, {\n        cart: [],\n        cartItems: 0,\n        cartPrice: 0\n      });\n\n    default:\n      return storeData || {};\n  }\n};","map":{"version":3,"sources":["C:\\Users\\yuki0\\OneDrive\\바탕 화면\\06 - SportsStore - REST and Checkout\\sportsstore\\src\\data\\CartReducer.js"],"names":["ActionTypes","CartReducer","storeData","action","newStore","cart","cartItems","cartPrice","type","CART_ADD","p","payload","product","q","quantity","existing","find","item","id","price","CART_UPDATE","map","diff","CART_REMOVE","selection","filter","CART_CLEAR"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AAC9C,MAAIC,QAAQ;AAAKC,IAAAA,IAAI,EAAE,EAAX;AAAeC,IAAAA,SAAS,EAAE,CAA1B;AAA6BC,IAAAA,SAAS,EAAE;AAAxC,KAA8CL,SAA9C,CAAZ;;AACA,UAAOC,MAAM,CAACK,IAAd;AACI,SAAKR,WAAW,CAACS,QAAjB;AACI,UAAMC,CAAC,GAAGP,MAAM,CAACQ,OAAP,CAAeC,OAAzB;AACA,UAAMC,CAAC,GAAGV,MAAM,CAACQ,OAAP,CAAeG,QAAzB;AAEA,UAAIC,QAAQ,GAAGX,QAAQ,CAACC,IAAT,CAAcW,IAAd,CAAmB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBR,CAAC,CAACQ,EAA1B;AAAA,OAAvB,CAAf;;AACA,UAAIH,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACD,QAAT,IAAqBD,CAArB;AACH,OAFD,MAEO;AACHT,QAAAA,QAAQ,CAACC,IAAT,gCAAoBD,QAAQ,CAACC,IAA7B,IAAmCF,MAAM,CAACQ,OAA1C;AACH;;AACDP,MAAAA,QAAQ,CAACE,SAAT,IAAsBO,CAAtB;AACAT,MAAAA,QAAQ,CAACG,SAAT,IAAsBG,CAAC,CAACS,KAAF,GAAUN,CAAhC;AACA,aAAOT,QAAP;;AAEJ,SAAKJ,WAAW,CAACoB,WAAjB;AACIhB,MAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcgB,GAAd,CAAkB,UAAAJ,IAAI,EAAI;AACtC,YAAIA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBf,MAAM,CAACQ,OAAP,CAAeC,OAAf,CAAuBM,EAA/C,EAAmD;AAC/C,cAAMI,IAAI,GAAGnB,MAAM,CAACQ,OAAP,CAAeG,QAAf,GAA0BG,IAAI,CAACH,QAA5C;AACAV,UAAAA,QAAQ,CAACE,SAAT,IAAsBgB,IAAtB;AACAlB,UAAAA,QAAQ,CAACG,SAAT,IAAsBU,IAAI,CAACL,OAAL,CAAaO,KAAb,GAAqBG,IAA3C;AACA,iBAAOnB,MAAM,CAACQ,OAAd;AACH,SALD,MAKO;AACH,iBAAOM,IAAP;AACH;AACJ,OATe,CAAhB;AAUA,aAAOb,QAAP;;AAEJ,SAAKJ,WAAW,CAACuB,WAAjB;AACI,UAAIC,SAAS,GAAGpB,QAAQ,CAACC,IAAT,CAAcW,IAAd,CAAmB,UAAAC,IAAI;AAAA,eACnCA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBf,MAAM,CAACQ,OAAP,CAAeO,EADA;AAAA,OAAvB,CAAhB;AAEAd,MAAAA,QAAQ,CAACE,SAAT,IAAsBkB,SAAS,CAACV,QAAhC;AACAV,MAAAA,QAAQ,CAACG,SAAT,IAAsBiB,SAAS,CAACV,QAAV,GAAqBU,SAAS,CAACZ,OAAV,CAAkBO,KAA7D;AACAf,MAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcoB,MAAd,CAAqB,UAAAR,IAAI;AAAA,eAAIA,IAAI,KAAKO,SAAb;AAAA,OAAzB,CAAhB;AACA,aAAOpB,QAAP;;AAEJ,SAAKJ,WAAW,CAAC0B,UAAjB;AACI,+BAAYxB,SAAZ;AAAuBG,QAAAA,IAAI,EAAE,EAA7B;AAAiCC,QAAAA,SAAS,EAAE,CAA5C;AAA+CC,QAAAA,SAAS,EAAE;AAA1D;;AAEJ;AACI,aAAOL,SAAS,IAAI,EAApB;AAxCR;AA0CH,CA5CM","sourcesContent":["import { ActionTypes } from \"./Types\";\n\nexport const CartReducer = (storeData, action) => {\n    let newStore = { cart: [], cartItems: 0, cartPrice: 0, ...storeData }\n    switch(action.type) {\n        case ActionTypes.CART_ADD: \n            const p = action.payload.product;\n            const q = action.payload.quantity;\n\n            let existing = newStore.cart.find(item => item.product.id === p.id);\n            if (existing) {\n                existing.quantity += q;\n            } else {\n                newStore.cart = [...newStore.cart, action.payload];\n            }\n            newStore.cartItems += q;\n            newStore.cartPrice += p.price * q;            \n            return newStore;\n\n        case ActionTypes.CART_UPDATE:\n            newStore.cart = newStore.cart.map(item => {\n                if (item.product.id === action.payload.product.id) {\n                    const diff = action.payload.quantity - item.quantity;\n                    newStore.cartItems += diff;\n                    newStore.cartPrice+= (item.product.price * diff);\n                    return action.payload;\n                } else {\n                    return item;\n                }\n            });\n            return newStore;\n\n        case ActionTypes.CART_REMOVE:\n            let selection = newStore.cart.find(item => \n                item.product.id === action.payload.id);\n            newStore.cartItems -= selection.quantity;\n            newStore.cartPrice -= selection.quantity * selection.product.price;\n            newStore.cart = newStore.cart.filter(item => item !== selection );\n            return newStore;\n\n        case ActionTypes.CART_CLEAR:\n            return { ...storeData, cart: [], cartItems: 0, cartPrice: 0}\n            \n        default:\n            return storeData || {};\n    }\n}\n"]},"metadata":{},"sourceType":"module"}